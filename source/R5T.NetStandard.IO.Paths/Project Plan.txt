R5T.NetStandard.IO.Paths - A library containing file IO path related functionality.

Goals

* Create strongly-typed path-part types
* Create a path Utilities class, that operates on both strings and strong-typed path-parts.
* Include System.IO.Path function wrappers that add explanations to the b\base functions.


Design - Overview

All paths take the form:

	[root]{optional, {directory separator}zero or more separated directory names}{optional, {directory separator}file name}

Any path that beings with a root is a rooted, or absolute, path. Thus all paths take the form:

	[absolute path]{optional, {directory separator} zero or more separated directory names}{optional, {directory separator}file name}

Among the strongly-typed path types, everything is a PathSegment, except for:
	
	* AbsolutePath and its derivatives, GenericAbsolutePath, DirectoryPath, and FilePath. An absolute-path is not a path-segment, it is a full path.
	* FileNameWithoutExtension, FileExtension, and GenericFileNameSegment. These are file name segments, and must first be combined into a file name, which is a path segment, before being combined into a path.
	* GenericDirectoryNameSegment. This is a directory name segment, and must first be combined with other directory name segments into a directory name, which is a path segment, before being combined into a path.

This means that all paths take the form:

	[absolute path]{optional, {directory separator} zero or more directory-separated path segments}.

This is the form used for all path combining operations. The result is an absolute-path, which, depending on context only known by the caller, can be cast to either a directory-path or file-path.

Finally, path segments can include things like the current directory name ('.'), or the parent directory name ('..'), and can be combined into a relative path to either a directory or a file. Thus all paths take one of the forms:

	[absolute path]{optional, {directory separator} relative path to a directory}
	[absolute path]{optional, {directory separator} relative path to a file}


Design - Combine

By default, combining path parts also resolves the combined path. Resolving removes any relative path names (e.g. "C:\Temp1\Temp2\..\..\temp.txt" => "C:\temp.txt").


Design

Note that there is no validation (by default) on the string values of the various strongly-typed path parts. Any string, valid or not, actually rooted or not, an actual path or not, can be put into the part part types. A validation framework is provided.

Extension methods are provided that turn strings into different path part types. These methods are called "As-", not "To-" since they perform no validation on the value of the string, instead only "casting" the string to the specified type.

Extension methods are provided that turn strings into different path parts, and validate that the input string is valid for the desired path part.

Making AbsolutePath abstract (non-instantiable) in favor of the concrete (instantiable) DirectoryPath and FilePath makes users think about each path, and whether they are expecting a file or directory.

Among the two path types, absolute and relative, absolute is the default path type. Thus there is no "AbsoluteFilePath", only "FilePath", while there is a "RelativeFilePath".

Directory relative paths can be relative to either a directory or file path. In the same way, file relative paths can be relative to both directory and file paths.

Among the two file name types, with extension and without extension, with extension is the default file name type. Thus there is no "FileNameWithExtension", only "FileName", while there is a "FileNameWithoutExtenion".

Basic Path Operations

* (DONE) Combine file-name and file-extension (get file-name).
* (DONE) Combine file-name segments into a file-name without extension.
* (DONE) Combine directory-name segments into a directory-name.
* (DONE) Combine an absolute-path with path-segments to get an absolute-path.
* (DONE) Combine an absolute-path with path-segments to get a directory-path.
* (DONE) Combine an absolute-path with path-segments to get a file-path.

* Combine directory-path segments into a relative directory path.
* Combine a directory-path (which is rooted) with directory-path segments to get a directory-path.

* Now, all with and without specification of separators.


Combine

By far the most common path operation is combining path parts into a path.

The System.IO.Path.Combine() method operates on strings but is, however, broken and limited. Broken in that if any of the path segments startup with the platform directory separator, segments before them are ignored! For example, (@"C:\", @"\temp", @"temp.txt") -> "\temp\temp.txt". Limited in that the executing platform directory separator will be used with no possibility of overloading to allow, for example, creating Linux paths on a Windows machine or Windows paths on a Linux machine.
        
There is then the Utilities.Combine() method that operates on strings. It allows specifying the directory separator using Utilities.CombineUsingDirectorySeparator(), and helpfully includes both Utilities.CombineWindows() and Utilities.CombineNonWindows() methods that specify their respective directory separators. The Utilities.Combine() method itself uses the currently executing platform directory separator. This method is robust in that it trims platform and platform-alternate directory separators from the ends of all path segments (except for the last segment, allowing the last segment to use a final directory separator), and the beginnings of all path segments (except the first, allowing for non-Windows rooted directories), to get just plain path segments. Any platform-alternate directory path separators (platform-alternate relative to the specified input directory path separator) within the path segments are replaced with the platform directory path separator. And finally all path segments are joined using the specified input directory path separator.

Finally, there are the Utilities.Combine() methods that operate on strongly-typed path parts. The most basic 

